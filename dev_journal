08/29/2016

	First milestone has been reached (having a player-controlled entity on screen,
	and the basic skeleton of the program).
	This week: enrich the game, start making actual gameplay.
	Current idea is a 2D platformer.
	Milestone for week's end: have a playable platforming level. Scrolling is a plus, but not required.

O9/03/2016

	POC collision detection mechanism implemented.
	Tinkering about what to do with physics:
	Should I use a "realistic" newtonian approach, or something more focused on my current use case?
	1. Newtonian is probably more extensible, and could make more intersesting things possible "for free" once it's in place. However, it looks difficult to implement correctly; in particular, it is probably difficult to have it cater to the needs of a platformer with tight, responsive controls.
	2. On the other hand, an ad-hoc solution could be more straightforward to implement initially, be more predictable and thus easier to deal with gameplay-wise. The downside being that it would need more work down the line in case I'd want richer physics interactions in the game.

	I've started working on soution #1 on the "physics" branch, but all things considered I'm probably going to scrap it and start working on solution #2 instead.

09/05/2016

  Playable platforming level milestone reached.
  As mentionned in the previous entry, I've opted for a less realistic approach to physics.
  Milestone for 09/12/2016:
    * refined gameplay (smoother movement, stricter air control)
    * cleaner code (conventions, structure: state pattern, less hardcoded things)
    * horizontal & vertical scrolling with tile-based maps
    
09/12/2016

	State pattern has been implemented for player control. But it adds complexity that isn't really needed right now...
	Tile-based level system is implemented, but scrolling isn't done yet.
	Also, there's a basic tileset system, but it currently isn't flexible.
	Objectives for 09/14:
	  * Scrolling system done
	  * Image-based tilesets
	And hopefully for 09/17:
	  * File format for maps and tilesets.
	  
09/18/2016

  Scrolling is done. However I'm still unsure about file formats. I've been thinking about using
  the Tiled editor along with the TMX format.
  Anyway, I think it's a bit early to implement that, and I've decided to focus on adding some gameplay instead.
  Plans for today:
    * Add an AI-controlled (brainless) enemy.
    * Add an "attack" action that makes the hero swing a sword, an can hit the enemy.
    
09/20/2016

  Implementing the last feature has made me wonder about the architecture of collision handling once again.
  The Entity class is growing quite large, and I'm tempted to use a component-based approach,
  where I'd have a component dedicated to collision handling. I already kind of have that with my Movement class,
  which can be thought of as a component.
  Making a PhysicsComponent that holds both entity position and movement is tempting, but it would be unnecessary
  for static entities.
  
  I'm going to continue with what I have for now, as I can't really predict what I'll need.
  For that matter, I need to experiment with larger and more interesting levels.
  That's why I've changed my mind about adding support for level edition: I'm going to do it now,
  probably using Tiled.
  For 09/24/2016:
    * Working Tiled map loader.
    * Animations.
    
09/26/2016

  Map loading from Tiled's TMX/TSX formats is done, albeit incomplete, as support for placing dynamic entities on the map from the editor is missing.
  I consider this feature important for easy prototyping. I also need a way to properly handle collisions
  for tiles which collision box is smaller than the logical tile size.
  On the other hand, I still haven't looked into animation. I don't feel it's a priority for now.
  For 09/28/2016:
  * Flexible tile bounding boxes
  * Load entities from map files: support for at least a "player start" entity, and the enemy.
